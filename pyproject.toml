[tool.poetry]
name = "litestar-user-probe"
version = "0.1.0"
description = "Test task to know about litestar Ð¸ advanced-alchemy"
authors = ["Artemis"]
package-mode = false

[tool.poetry.dependencies]
python = "^3.12"
advanced-alchemy = "^1.4.1"
python-dotenv = "^1.1.0"
litestar-granian = "^0.12.2"
msgspec = "^0.19.0"
pydantic = "^2.11.4"
litestar = {extras = ["jwt"], version = "^2.16.0"}
asyncpg = "<0.29"
passlib = "^1.7.4"
bcrypt = "4.0.1"
ruff = "^0.11.13"
pytest = "^8.4.0"
pytest-asyncio = "^1.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 4

[tool.ruff.lint]
#select = ["E4", "E7", "E9", "F", "B", "Q"]
select = ["ALL"]
ignore = [
    "D", # Ignore docstring rules
    "COM812",  # No trailing comma enforcement
    "I001", # Disable isort's 'import sorting' check. PEP8 is prefered
    "TC002", # import PEP8 is prefered
    "SIM108",  # Ternary expressions are recommended but not required
    "PLR0913", # To difficult to use params like class in litestar
    "RUF012", # don't work with litestar
    "ISC002", # You can use / to for string continuation, it depends on team
    "PTH", # How need to use path
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
extend-select = [
  "UP",  # pyupgrade
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = "ignore::DeprecationWarning:pytest_asyncio.plugin"
testpaths = [
    "src/users/tests",
]
pythonpath = [
  "src"
]
